import { Component, Input, AfterViewInit } from '@angular/core';
import { ExerciseLogDto } from '../../../models/dtos-response';
import {
  Chart,
  ChartConfiguration,
  registerables, // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ Chart.js
} from 'chart.js';

Chart.register(...registerables); // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏

@Component({
  selector: 'app-activity-chart',
  template: `
    <div class="chart-container">
      <h3 class="chart-title">üìä –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
      <canvas id="activityChart"></canvas>
    </div>
  `,
  styleUrls: ['./activity-chart.component.css'],
  standalone: true,
})
export class ActivityChartComponent implements AfterViewInit {
  @Input() exerciseLogs: ExerciseLogDto[] = [];

  ngAfterViewInit(): void {
    this.renderChart();
  }

  renderChart(): void {
    const canvas = document.getElementById('activityChart') as HTMLCanvasElement;
    const ctx = canvas?.getContext('2d');

    if (ctx) {
      // –®–∞–≥ 1: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ
      const aggregatedData = this.aggregateCaloriesByDate(this.exerciseLogs);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏ —Å—É–º–º—ã –∫–∞–ª–æ—Ä–∏–π
      const labels = Object.keys(aggregatedData);
      const data = Object.values(aggregatedData);

      // –®–∞–≥ 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
      const chartConfig: ChartConfiguration = {
        type: 'bar',
        data: {
          labels, // –î–∞—Ç—ã
          datasets: [
            {
              label: '–ö–∞–ª–æ—Ä–∏–∏ —Å–æ–∂–∂–µ–Ω—ã',
              data, // –°—É–º–º–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ –∫–∞–∂–¥–æ–π –¥–∞—Ç–µ
              backgroundColor: 'rgba(76, 175, 80, 0.7)',
              borderColor: '#388e3c',
              borderWidth: 1,
              barThickness: 40, // –®–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: true,
              position: 'top',
              labels: {
                color: '#333333',
                font: { size: 12, weight: 'bold' },
              },
            },
          },
          scales: {
            x: {
              grid: { display: false },
              ticks: { color: '#333333', font: { size: 12 } },
            },
            y: {
              beginAtZero: true,
              ticks: { color: '#333333', font: { size: 12 } },
            },
          },
        },
      };

      // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
      new Chart(ctx, chartConfig);
    } else {
      console.error('Canvas context is null. Chart cannot be rendered.');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π –ø–æ –¥–∞—Ç–∞–º
  private aggregateCaloriesByDate(logs: ExerciseLogDto[]): { [date: string]: number } {
    const aggregatedData: { [date: string]: number } = {};

    logs.forEach((log) => {
      const dateKey = new Date(log.date).toLocaleDateString('ru-RU'); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
      if (aggregatedData[dateKey]) {
        aggregatedData[dateKey] += log.caloriesBurned; // –°—É–º–º–∏—Ä—É–µ–º –∫–∞–ª–æ—Ä–∏–∏
      } else {
        aggregatedData[dateKey] = log.caloriesBurned; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
      }
    });

    return aggregatedData;
  }
}
